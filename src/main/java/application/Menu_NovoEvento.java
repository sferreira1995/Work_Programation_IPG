/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author GASS
 */
package application;

import classesApp.Enfermeiro;
import classesApp.Evento;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import classesApp.Local;
import classesApp.Medico;
import classesApp.Motivo;
import classesApp.Quem_Ativa;
import classesApp.Vitima;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import javax.swing.*;
import javax.swing.border.LineBorder;

public class Menu_NovoEvento extends javax.swing.JFrame {

    private static final Pattern FULL_NAME_PATTERN = Pattern.compile("^[a-zA-Z\\s]+$");

    /**
     * Creates new form Menu_1
     */
    public Menu_NovoEvento() {

        initComponents();

        setupComboBox();

        this.N_Processo.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent e) {
                Vitima vitima = new Vitima();
                vitima = vitima.getVitimaProcess(Integer.valueOf(N_Processo.getText()));
                if (vitima != null) {
                    Nome_Vitima.setText(vitima.getNOME_VITIMA());
                    Nome_Vitima.setEnabled(false);
                    data_Nascimento.setDate(vitima.getDATA_NASCIMENTO());
                    data_Nascimento.setEnabled(false);
                    dataAdmicaoHospitalar.setDate(vitima.getDATA_ADMISSAO_HOSPITALAR());
                    dataAdmicaoHospitalar.setEnabled(false);
                    Genero.setSelectedItem(vitima.getSEXO());
                    Genero.setEnabled(false);
                } else {
                    Nome_Vitima.setText("");
                    Nome_Vitima.setEnabled(true);
                    data_Nascimento.clear();
                    data_Nascimento.setEnabled(true);
                    dataAdmicaoHospitalar.clear();
                    dataAdmicaoHospitalar.setEnabled(true);
                    Genero.setEnabled(true);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Titulo_NovoEvento = new javax.swing.JLabel();
        Sair = new java.awt.Button();
        jDesktopPlane_Vitima = new javax.swing.JDesktopPane();
        PainelVitima = new javax.swing.JPanel();
        Label_Nome = new javax.swing.JLabel();
        Label_D_Nascimento = new javax.swing.JLabel();
        Label_Genero = new javax.swing.JLabel();
        Label_D_Admissao_Hospitalar = new javax.swing.JLabel();
        Nome_Vitima = new javax.swing.JTextField();
        N_Processo = new javax.swing.JTextField();
        Genero = new javax.swing.JComboBox<>();
        dataAdmicaoHospitalar = new com.github.lgooddatepicker.components.DatePicker();
        data_Nascimento = new com.github.lgooddatepicker.components.DatePicker();
        Label_Processo = new javax.swing.JLabel();
        jDesktopPaneEvento = new javax.swing.JDesktopPane();
        Label_Hora_Evento = new javax.swing.JLabel();
        Label_Hora_Chamada = new javax.swing.JLabel();
        Label_Hora_Chegada_EEMI = new javax.swing.JLabel();
        Label_Local = new javax.swing.JLabel();
        Label_Medico = new javax.swing.JLabel();
        Label_Enfermeiro_EEMI = new javax.swing.JLabel();
        Label_Quem_Ativa = new javax.swing.JLabel();
        Label_PCR = new javax.swing.JLabel();
        Local_box = new javax.swing.JComboBox<>();
        Quem_Ativa_box = new javax.swing.JComboBox<>();
        Nome_Medico = new javax.swing.JComboBox<>();
        Nome_Enfermeiro = new javax.swing.JComboBox<>();
        hora_Chegada = new javax.swing.JFormattedTextField();
        hora_Chamada = new javax.swing.JFormattedTextField();
        hora_Evento = new javax.swing.JFormattedTextField();
        pcr_box = new javax.swing.JComboBox<>();
        dataEvento = new com.github.lgooddatepicker.components.DatePicker();
        dataChamada = new com.github.lgooddatepicker.components.DatePicker();
        dataChegada = new com.github.lgooddatepicker.components.DatePicker();
        guardarButton = new java.awt.Button();
        validationString = new java.awt.Label();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Titulo_NovoEvento.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Titulo_NovoEvento.setText("EEMI Cova da Beira - Novo Evento");
        Titulo_NovoEvento.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Titulo_NovoEvento.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        Titulo_NovoEvento.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        Sair.setActionCommand("BT_Sair");
        Sair.setBackground(new java.awt.Color(240, 0, 0));
        Sair.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Sair.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        Sair.setLabel("Sair");
        Sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SairActionPerformed(evt);
            }
        });

        jDesktopPlane_Vitima.setBackground(getBackground());
        jDesktopPlane_Vitima.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Identificação do Paciente", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 10))); // NOI18N
        jDesktopPlane_Vitima.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N

        PainelVitima.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N

        Label_Nome.setText("Nome:");
        Label_Nome.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N

        Label_D_Nascimento.setText("D.Nascimento");
        Label_D_Nascimento.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N

        Label_Genero.setText("Genero");
        Label_Genero.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N

        Label_D_Admissao_Hospitalar.setText("D.Admissão Hospitalar");
        Label_D_Admissao_Hospitalar.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N

        Nome_Vitima.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        Nome_Vitima.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Nome_VitimaActionPerformed(evt);
            }
        });

        N_Processo.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        N_Processo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                N_ProcessoActionPerformed(evt);
            }
        });

        Genero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Masculino", "Feminino" }));
        Genero.setBackground(new java.awt.Color(242, 242, 242));
        Genero.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        Genero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GeneroActionPerformed(evt);
            }
        });

        Label_Processo.setText("Processo:");
        Label_Processo.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N

        javax.swing.GroupLayout PainelVitimaLayout = new javax.swing.GroupLayout(PainelVitima);
        PainelVitima.setLayout(PainelVitimaLayout);
        PainelVitimaLayout.setHorizontalGroup(
            PainelVitimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PainelVitimaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PainelVitimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PainelVitimaLayout.createSequentialGroup()
                        .addGroup(PainelVitimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PainelVitimaLayout.createSequentialGroup()
                                .addComponent(Label_Nome)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 968, Short.MAX_VALUE)
                                .addComponent(Genero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PainelVitimaLayout.createSequentialGroup()
                                .addComponent(Label_D_Admissao_Hospitalar)
                                .addGap(28, 28, 28)
                                .addComponent(dataAdmicaoHospitalar, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(Label_D_Nascimento)
                                .addGap(26, 26, 26)
                                .addComponent(data_Nascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(15, 15, 15))
                    .addGroup(PainelVitimaLayout.createSequentialGroup()
                        .addComponent(Label_Processo)
                        .addGap(10, 10, 10)
                        .addGroup(PainelVitimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PainelVitimaLayout.createSequentialGroup()
                                .addComponent(Nome_Vitima)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Label_Genero)
                                .addGap(113, 113, 113))
                            .addGroup(PainelVitimaLayout.createSequentialGroup()
                                .addComponent(N_Processo, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );
        PainelVitimaLayout.setVerticalGroup(
            PainelVitimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PainelVitimaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PainelVitimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(N_Processo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Label_Processo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(PainelVitimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Label_Nome)
                    .addComponent(Nome_Vitima, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Genero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Label_Genero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PainelVitimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Label_D_Admissao_Hospitalar)
                    .addComponent(dataAdmicaoHospitalar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(data_Nascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Label_D_Nascimento))
                .addContainerGap())
        );

        jDesktopPlane_Vitima.setLayer(PainelVitima, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPlane_VitimaLayout = new javax.swing.GroupLayout(jDesktopPlane_Vitima);
        jDesktopPlane_Vitima.setLayout(jDesktopPlane_VitimaLayout);
        jDesktopPlane_VitimaLayout.setHorizontalGroup(
            jDesktopPlane_VitimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPlane_VitimaLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(PainelVitima, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59))
        );
        jDesktopPlane_VitimaLayout.setVerticalGroup(
            jDesktopPlane_VitimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PainelVitima, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jDesktopPaneEvento.setBackground(getBackground());
        jDesktopPaneEvento.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Evento", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 10))); // NOI18N

        Label_Hora_Evento.setText("Hora Evento:");
        Label_Hora_Evento.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N

        Label_Hora_Chamada.setText("Hora Chamada:");
        Label_Hora_Chamada.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N

        Label_Hora_Chegada_EEMI.setText("Hora Chegada EEMI:");
        Label_Hora_Chegada_EEMI.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N

        Label_Local.setText("Local:");
        Label_Local.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N

        Label_Medico.setText("Medico EEMI:");
        Label_Medico.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N

        Label_Enfermeiro_EEMI.setText("Enfermeiro EEMI:");
        Label_Enfermeiro_EEMI.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N

        Label_Quem_Ativa.setText("Quem ativa:");
        Label_Quem_Ativa.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N

        Label_PCR.setText("PCR?:");
        Label_PCR.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N

        Local_box.setBackground(new java.awt.Color(242, 242, 242));
        Local_box.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        Local_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Local_boxActionPerformed(evt);
            }
        });

        Quem_Ativa_box.setBackground(new java.awt.Color(242, 242, 242));
        Quem_Ativa_box.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        Quem_Ativa_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Quem_Ativa_boxActionPerformed(evt);
            }
        });

        Nome_Medico.setBackground(new java.awt.Color(242, 242, 242));
        Nome_Medico.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        Nome_Medico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Nome_MedicoActionPerformed(evt);
            }
        });

        Nome_Enfermeiro.setBackground(new java.awt.Color(242, 242, 242));
        Nome_Enfermeiro.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        Nome_Enfermeiro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Nome_EnfermeiroActionPerformed(evt);
            }
        });

        hora_Chegada.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("HH:mm"))));
        hora_Chegada.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        hora_Chegada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hora_ChegadaActionPerformed(evt);
            }
        });

        hora_Chamada.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("hh:mm"))));
        hora_Chamada.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        hora_Chamada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hora_ChamadaActionPerformed(evt);
            }
        });

        hora_Evento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("HH:mm"))));
        hora_Evento.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        hora_Evento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hora_EventoActionPerformed(evt);
            }
        });

        pcr_box.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "sim", "não" }));
        pcr_box.setBackground(new java.awt.Color(242, 242, 242));
        pcr_box.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        pcr_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pcr_boxActionPerformed(evt);
            }
        });

        jDesktopPaneEvento.setLayer(Label_Hora_Evento, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneEvento.setLayer(Label_Hora_Chamada, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneEvento.setLayer(Label_Hora_Chegada_EEMI, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneEvento.setLayer(Label_Local, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneEvento.setLayer(Label_Medico, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneEvento.setLayer(Label_Enfermeiro_EEMI, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneEvento.setLayer(Label_Quem_Ativa, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneEvento.setLayer(Label_PCR, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneEvento.setLayer(Local_box, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneEvento.setLayer(Quem_Ativa_box, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneEvento.setLayer(Nome_Medico, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneEvento.setLayer(Nome_Enfermeiro, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneEvento.setLayer(hora_Chegada, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneEvento.setLayer(hora_Chamada, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneEvento.setLayer(hora_Evento, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneEvento.setLayer(pcr_box, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneEvento.setLayer(dataEvento, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneEvento.setLayer(dataChamada, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneEvento.setLayer(dataChegada, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPaneEventoLayout = new javax.swing.GroupLayout(jDesktopPaneEvento);
        jDesktopPaneEvento.setLayout(jDesktopPaneEventoLayout);
        jDesktopPaneEventoLayout.setHorizontalGroup(
            jDesktopPaneEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPaneEventoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDesktopPaneEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDesktopPaneEventoLayout.createSequentialGroup()
                        .addGroup(jDesktopPaneEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jDesktopPaneEventoLayout.createSequentialGroup()
                                .addComponent(Label_Local, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Local_box, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jDesktopPaneEventoLayout.createSequentialGroup()
                                .addComponent(Label_Quem_Ativa, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Quem_Ativa_box, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jDesktopPaneEventoLayout.createSequentialGroup()
                                .addComponent(Label_Medico, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jDesktopPaneEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Nome_Enfermeiro, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Nome_Medico, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(90, 90, 90))
                    .addGroup(jDesktopPaneEventoLayout.createSequentialGroup()
                        .addComponent(Label_Enfermeiro_EEMI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jDesktopPaneEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Label_Hora_Chamada, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Label_Hora_Evento, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Label_Hora_Chegada_EEMI)
                    .addComponent(Label_PCR, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jDesktopPaneEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jDesktopPaneEventoLayout.createSequentialGroup()
                        .addGroup(jDesktopPaneEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dataEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dataChamada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dataChegada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jDesktopPaneEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hora_Chamada, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hora_Evento, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hora_Chegada, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(pcr_box, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(383, 383, 383))
        );
        jDesktopPaneEventoLayout.setVerticalGroup(
            jDesktopPaneEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPaneEventoLayout.createSequentialGroup()
                .addGroup(jDesktopPaneEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Label_Local)
                    .addComponent(Local_box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Label_Hora_Evento))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDesktopPaneEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Label_Quem_Ativa)
                    .addComponent(Quem_Ativa_box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Label_Hora_Chamada))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDesktopPaneEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Label_Medico)
                    .addComponent(Nome_Medico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Label_Hora_Chegada_EEMI))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDesktopPaneEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Label_Enfermeiro_EEMI)
                    .addComponent(Nome_Enfermeiro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Label_PCR))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jDesktopPaneEventoLayout.createSequentialGroup()
                .addGroup(jDesktopPaneEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hora_Evento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDesktopPaneEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hora_Chamada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataChamada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDesktopPaneEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hora_Chegada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataChegada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(pcr_box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        Label_Hora_Chamada.getAccessibleContext().setAccessibleDescription("");
        Local_box.getAccessibleContext().setAccessibleName("Local");
        Quem_Ativa_box.getAccessibleContext().setAccessibleName("Quem_Ativa");
        Nome_Medico.getAccessibleContext().setAccessibleName("Nome_Medico");
        Nome_Enfermeiro.getAccessibleContext().setAccessibleName("Nome_Enfermeiro");

        guardarButton.setActionCommand("guardar");
        guardarButton.setBackground(new java.awt.Color(0, 240, 0));
        guardarButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        guardarButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        guardarButton.setLabel("Seguinte");
        guardarButton.setMinimumSize(new java.awt.Dimension(34, 24));
        guardarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(validationString, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(378, 378, 378))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(Titulo_NovoEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 1018, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(455, 455, 455)
                        .addComponent(guardarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Sair, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jDesktopPlane_Vitima, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(jDesktopPaneEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Titulo_NovoEvento)
                .addGap(26, 26, 26)
                .addComponent(jDesktopPlane_Vitima, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDesktopPaneEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(validationString, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Sair, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(guardarButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        guardarButton.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static boolean isValidFullName(String name) {
        // Check if the name matches the pattern
        Matcher matcher = FULL_NAME_PATTERN.matcher(name);
        return matcher.matches();
    }

    public static boolean isValidInteger(String str) {
        // Regular expression to match an integer (positive or negative)
        return str.matches("\\d+");
    }

    public static boolean isValidTime(String time) {
        // Regular expression to match time in HH:mm format
        String timePattern = "^([01]?[0-9]|2[0-3]):[0-5][0-9]$";
        return time.matches(timePattern);
    }

    public static String createOracleTimestamp(String date, String time) {
        // Define the input format for date and time
        DateTimeFormatter inputDateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        DateTimeFormatter inputTimeFormatter = DateTimeFormatter.ofPattern("HH:mm");

        // Parse the date and time strings
        LocalDateTime dateTime = LocalDateTime.parse(date + "T" + time + ":00");

        // Define the output format for Oracle TIMESTAMP
        DateTimeFormatter oracleFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

        // Format the LocalDateTime to the desired Oracle TIMESTAMP format
        return dateTime.format(oracleFormatter);
    }

    public static int compareWithCurrentDate(String dateStr) {
        // Define the date format
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");

        try {
            // Parse the input date string
            LocalDate givenDate = LocalDate.parse(dateStr, dateFormatter);
            // Get the current date
            LocalDate currentDate = LocalDate.now();

            // Compare the given date with the current date
            if (givenDate.isBefore(currentDate)) {
                return -1; // Given date is in the past
            } else if (givenDate.isEqual(currentDate)) {
                return 0; // Given date is the same as the current date
            } else {
                return 1; // Given date is in the future
            }
        } catch (DateTimeParseException e) {
            // Handle invalid date format
            System.out.println("Invalid date format. Please use yyyy-MM-dd.");
            return -2;
        }
    }

// Combobox Novo evento    
    private void setupComboBox() {
        Local_box.addItem("-");
        Quem_Ativa_box.addItem("-");
        Nome_Enfermeiro.addItem("-");
        Nome_Medico.addItem("-");

        List<Local> locais = Local.getAllLocais();
        for (Local local : locais) {
            Local_box.addItem(local.getLOCAL());
        }
        List<Quem_Ativa> listaQuemAtiva = Quem_Ativa.getAllQuemAtiva();
        for (Quem_Ativa quem_ativa : listaQuemAtiva) {
            Quem_Ativa_box.addItem(quem_ativa.getQUEM_ATIVA());
        }

        List<Enfermeiro> enfermeiros = Enfermeiro.getAllEnfermeiro();
        for (Enfermeiro enfermeiro : enfermeiros) {
            Nome_Enfermeiro.addItem(enfermeiro.getNOME_ENFERMEIRO());
        }

        List<Medico> medicos = Medico.getAllMedicos();
        for (Medico medico : medicos) {
            Nome_Medico.addItem(medico.getNOME_MEDICO());
        }
    }


    private void SairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SairActionPerformed
        // TODO add your handling code here:
        new Menu_1().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_SairActionPerformed

    private void Local_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Local_boxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Local_boxActionPerformed

    private void Quem_Ativa_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Quem_Ativa_boxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Quem_Ativa_boxActionPerformed

    private void Nome_MedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Nome_MedicoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Nome_MedicoActionPerformed

    private void hora_EventoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hora_EventoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hora_EventoActionPerformed

    private void hora_ChamadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hora_ChamadaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hora_ChamadaActionPerformed

    private void hora_ChegadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hora_ChegadaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hora_ChegadaActionPerformed

    private void Nome_EnfermeiroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Nome_EnfermeiroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Nome_EnfermeiroActionPerformed
    private boolean validarCampos() {
        if (!isValidInteger(N_Processo.getText())) {
            validationString.setText("N_Processo invalido");
            validationString.setForeground(Color.red);
            N_Processo.setBorder(new LineBorder(Color.RED));
            return false;
        } else {
            N_Processo.setBorder(new LineBorder(Color.green));
            validationString.setText("");
        }

        if (!isValidFullName(Nome_Vitima.getText())) {
            validationString.setText("Nome do paciente invalido");
            validationString.setForeground(Color.red);
            Nome_Vitima.setBorder(new LineBorder(Color.RED));
            return false;
        } else {
            Nome_Vitima.setBorder(new LineBorder(Color.green));
            validationString.setText("");
        }

        if ("".equals(data_Nascimento.getDateStringOrEmptyString())) {
            validationString.setText("Escolha data de nascimento");
            validationString.setForeground(Color.red);
            data_Nascimento.setBorder(new LineBorder(Color.RED));
            return false;
        } else {
            data_Nascimento.setBorder(new LineBorder(Color.green));
            validationString.setText("");
        }
        if ("".equals(dataAdmicaoHospitalar.getDateStringOrEmptyString())) {
            validationString.setText("Escolha data de admissão hospitalar");
            validationString.setForeground(Color.red);
            dataAdmicaoHospitalar.setBorder(new LineBorder(Color.RED));
            return false;
        } else {
            dataAdmicaoHospitalar.setBorder(new LineBorder(Color.green));
            validationString.setText("");
        }

        if ("-".equals(Local_box.getSelectedItem().toString())) {
            validationString.setText("Escolha o Local");
            validationString.setForeground(Color.red);
            Local_box.setBorder(new LineBorder(Color.RED));
            return false;
        } else {
            Local_box.setBorder(new LineBorder(Color.green));
            validationString.setText("");
        }
        if ("-".equals(Quem_Ativa_box.getSelectedItem().toString())) {
            validationString.setText("Escolha o Quem Ativa");
            validationString.setForeground(Color.red);
            Quem_Ativa_box.setBorder(new LineBorder(Color.RED));
            return false;
        } else {
            Quem_Ativa_box.setBorder(new LineBorder(Color.green));
            validationString.setText("");
        }

        if ("-".equals(Nome_Medico.getSelectedItem().toString())) {
            validationString.setText("Escolha o Medico");
            validationString.setForeground(Color.red);
            Nome_Medico.setBorder(new LineBorder(Color.RED));
            return false;
        } else {
            Nome_Medico.setBorder(new LineBorder(Color.green));
            validationString.setText("");
        }
        if ("-".equals(Nome_Enfermeiro.getSelectedItem().toString())) {
            validationString.setText("Escolha o Enfermeiro");
            validationString.setForeground(Color.red);
            Nome_Enfermeiro.setBorder(new LineBorder(Color.RED));
            return false;
        } else {
            Nome_Enfermeiro.setBorder(new LineBorder(Color.green));
            validationString.setText("");
        }

        if ("".equals(dataEvento.getDateStringOrEmptyString())) {
            validationString.setText("Escolha data do evento");
            validationString.setForeground(Color.red);
            dataEvento.setBorder(new LineBorder(Color.RED));
            return false;
        } else {
            dataEvento.setBorder(new LineBorder(Color.green));
            validationString.setText("");
        }

        if (!isValidTime(hora_Evento.getText())) {
            validationString.setText("A hora do evento é invalida o formato tem que ser HH:mm");
            validationString.setForeground(Color.red);
            hora_Evento.setBorder(new LineBorder(Color.RED));
            return false;
        } else {
            hora_Evento.setBorder(new LineBorder(Color.green));
            validationString.setText("");
        }

        if ("".equals(dataChamada.getDateStringOrEmptyString())) {
            validationString.setText("Escolha hora do chamada");
            validationString.setForeground(Color.red);
            dataChamada.setBorder(new LineBorder(Color.RED));
            return false;
        } else {
            dataChamada.setBorder(new LineBorder(Color.green));
            validationString.setText("");
        }

        if (!isValidTime(hora_Chamada.getText())) {
            validationString.setText("A hora da chamada é invalida o formato tem que ser HH:mm");
            validationString.setForeground(Color.red);
            hora_Chamada.setBorder(new LineBorder(Color.RED));
            return false;
        } else {
            hora_Chamada.setBorder(new LineBorder(Color.green));
            validationString.setText("");
        }

        if ("".equals(dataChegada.getDateStringOrEmptyString())) {
            validationString.setText("Escolha data da chegada EEMI");
            validationString.setForeground(Color.red);
            dataChamada.setBorder(new LineBorder(Color.RED));
            return false;
        } else {
            dataChegada.setBorder(new LineBorder(Color.green));
            validationString.setText("");
        }

        if (!isValidTime(hora_Chegada.getText())) {
            validationString.setText("A hora da chegada é invalida o formato tem que ser HH:mm");
            validationString.setForeground(Color.red);
            hora_Chegada.setBorder(new LineBorder(Color.RED));
            return false;
        } else {
            hora_Chegada.setBorder(new LineBorder(Color.green));
            validationString.setText("");
        }

        if (compareWithCurrentDate(data_Nascimento.getDateStringOrEmptyString()) == 1) {
            validationString.setText("A data de nascimento tem quer ser no passado ou o dia atual");
            validationString.setForeground(Color.red);
            data_Nascimento.setBorder(new LineBorder(Color.RED));
            return false;
        } else {
            data_Nascimento.setBorder(new LineBorder(Color.green));
            validationString.setText("");
        }

        if (compareWithCurrentDate(dataAdmicaoHospitalar.getDateStringOrEmptyString()) == 1) {
            validationString.setText("A data de admissão tem quer ser no passado ou o dia atual");
            validationString.setForeground(Color.red);
            dataAdmicaoHospitalar.setBorder(new LineBorder(Color.RED));
            return false;
        } else {
            dataAdmicaoHospitalar.setBorder(new LineBorder(Color.green));
            validationString.setText("");
        }

        if (compareWithCurrentDate(dataEvento.getDateStringOrEmptyString()) == 1) {
            validationString.setText("A data do evento tem quer ser no passado ou o dia atual");
            validationString.setForeground(Color.red);
            dataEvento.setBorder(new LineBorder(Color.RED));
            return false;
        } else {
            dataEvento.setBorder(new LineBorder(Color.green));
            validationString.setText("");
        }

        if (compareWithCurrentDate(dataChamada.getDateStringOrEmptyString()) == 1) {
            validationString.setText("A data da chamada tem quer ser no passado ou o dia atual");
            validationString.setForeground(Color.red);
            dataChamada.setBorder(new LineBorder(Color.RED));
            return false;
        } else {
            dataChamada.setBorder(new LineBorder(Color.green));
            validationString.setText("");
        }

        if (compareWithCurrentDate(dataChegada.getDateStringOrEmptyString()) == 1) {
            validationString.setText("A data da chegada tem quer ser no passado ou o dia atual");
            validationString.setForeground(Color.red);
            dataChegada.setBorder(new LineBorder(Color.RED));
            return false;
        } else {
            dataChegada.setBorder(new LineBorder(Color.green));
            validationString.setText("");
        }

        if ("-".equals(pcr_box.getSelectedItem().toString())) {
            validationString.setText("Escolha uma opção PCR");
            validationString.setForeground(Color.red);
            pcr_box.setBorder(new LineBorder(Color.RED));
            return false;
        } else {
            pcr_box.setBorder(new LineBorder(Color.green));
            validationString.setText("");
        }

        return true;
    }


    private void guardarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarButtonActionPerformed
        boolean camposValidos = validarCampos();
        if (camposValidos) {
            Vitima vitima = new Vitima(Integer.valueOf(N_Processo.getText()), Nome_Vitima.getText(), data_Nascimento.getDateStringOrEmptyString(), dataAdmicaoHospitalar.getDateStringOrEmptyString(), Genero.getSelectedItem().toString());
            vitima.verifyAndInsertVitimaProcess(Integer.valueOf(N_Processo.getText()), Nome_Vitima.getText(), data_Nascimento.getDateStringOrEmptyString(), dataAdmicaoHospitalar.getDateStringOrEmptyString(), Genero.getSelectedItem().toString());
            Evento evento = new Evento();
            evento.insertEvento(dataEvento.getDateStringOrEmptyString() + " " + hora_Evento.getText(), dataChamada.getDateStringOrEmptyString() + " " + hora_Chamada.getText(), dataChegada.getDateStringOrEmptyString() + " " + hora_Chegada.getText(), pcr_box.getSelectedItem().toString(), Quem_Ativa_box.getSelectedItem().toString(), Integer.valueOf(N_Processo.getText()), Local_box.getSelectedItem().toString(), Nome_Enfermeiro.getSelectedItem().toString(), Nome_Medico.getSelectedItem().toString());
            int n_evento = evento.getMaxNEvent();
            if ("sim".equals(pcr_box.getSelectedItem().toString())) {
                Menu_PCR pcr = new Menu_PCR(""+n_evento);
                pcr.setVisible(true);

            } else {
                new Menu_1().setVisible(true);
            }
            this.dispose();
        }
    }//GEN-LAST:event_guardarButtonActionPerformed

    private void pcr_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pcr_boxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pcr_boxActionPerformed

    private void GeneroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GeneroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GeneroActionPerformed


    private void N_ProcessoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_N_ProcessoActionPerformed
        Vitima vitima = new Vitima();
        vitima = vitima.getVitimaProcess(Integer.valueOf(N_Processo.getText()));
        if (vitima != null) {
            Nome_Vitima.setText(vitima.getNOME_VITIMA());
            Nome_Vitima.setEnabled(false);
            data_Nascimento.setDate(vitima.getDATA_NASCIMENTO());
            data_Nascimento.setEnabled(false);
            dataAdmicaoHospitalar.setDate(vitima.getDATA_ADMISSAO_HOSPITALAR());
            dataAdmicaoHospitalar.setEnabled(false);
            Genero.setSelectedItem(vitima.getSEXO());
            Genero.setEnabled(false);
        } else {
            Nome_Vitima.setText("");
            Nome_Vitima.setEnabled(true);
            data_Nascimento.clear();
            data_Nascimento.setEnabled(true);
            dataAdmicaoHospitalar.clear();
            dataAdmicaoHospitalar.setEnabled(true);
            Genero.setEnabled(true);
        }

    }//GEN-LAST:event_N_ProcessoActionPerformed

    private void Nome_VitimaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Nome_VitimaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Nome_VitimaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu_NovoEvento().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Genero;
    private javax.swing.JLabel Label_D_Admissao_Hospitalar;
    private javax.swing.JLabel Label_D_Nascimento;
    private javax.swing.JLabel Label_Enfermeiro_EEMI;
    private javax.swing.JLabel Label_Genero;
    private javax.swing.JLabel Label_Hora_Chamada;
    private javax.swing.JLabel Label_Hora_Chegada_EEMI;
    private javax.swing.JLabel Label_Hora_Evento;
    private javax.swing.JLabel Label_Local;
    private javax.swing.JLabel Label_Medico;
    private javax.swing.JLabel Label_Nome;
    private javax.swing.JLabel Label_PCR;
    private javax.swing.JLabel Label_Processo;
    private javax.swing.JLabel Label_Quem_Ativa;
    private javax.swing.JComboBox<String> Local_box;
    private javax.swing.JTextField N_Processo;
    private javax.swing.JComboBox<String> Nome_Enfermeiro;
    private javax.swing.JComboBox<String> Nome_Medico;
    private javax.swing.JTextField Nome_Vitima;
    private javax.swing.JPanel PainelVitima;
    private javax.swing.JComboBox<String> Quem_Ativa_box;
    private java.awt.Button Sair;
    private javax.swing.JLabel Titulo_NovoEvento;
    private com.github.lgooddatepicker.components.DatePicker dataAdmicaoHospitalar;
    private com.github.lgooddatepicker.components.DatePicker dataChamada;
    private com.github.lgooddatepicker.components.DatePicker dataChegada;
    private com.github.lgooddatepicker.components.DatePicker dataEvento;
    private com.github.lgooddatepicker.components.DatePicker data_Nascimento;
    private java.awt.Button guardarButton;
    private javax.swing.JFormattedTextField hora_Chamada;
    private javax.swing.JFormattedTextField hora_Chegada;
    private javax.swing.JFormattedTextField hora_Evento;
    private javax.swing.JDesktopPane jDesktopPaneEvento;
    private javax.swing.JDesktopPane jDesktopPlane_Vitima;
    private javax.swing.JComboBox<String> pcr_box;
    private java.awt.Label validationString;
    // End of variables declaration//GEN-END:variables
}
